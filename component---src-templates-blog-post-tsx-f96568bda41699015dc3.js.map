{"version":3,"file":"component---src-templates-blog-post-tsx-f96568bda41699015dc3.js","mappings":"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","sources":["webpack://lemon-press-website/./src/components/Bio/index.tsx","webpack://lemon-press-website/./src/templates/blog-post.tsx","webpack://lemon-press-website/./src/utils/cleanHTML.ts","webpack://lemon-press-website/./src/utils/calculateReadTime.ts","webpack://lemon-press-website/./src/utils/removeExcerptLink.ts","webpack://lemon-press-website/./src/components/Figure/index.tsx","webpack://lemon-press-website/./src/utils/parseHTML.tsx"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"../../stitches.config\";\n\nimport { Text } from \"../Text\";\n\nconst Wrapper = styled(\"div\", {\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"$1\",\n\n  background: \"$accent\",\n  padding: \"$1\",\n\n  \"@smUp\": {\n    flexDirection: \"row\",\n  },\n});\n\nconst ProfilePhoto = styled(\"img\", {\n  width: \"100%\",\n  height: \"100%\",\n\n  maxWidth: 150,\n  maxHeight: 150,\n});\n\nexport const Bio = ({ author: { avatar, firstName, description } }) => {\n  const avatarUrl = avatar?.url;\n\n  return (\n    <Wrapper>\n      {avatarUrl && <ProfilePhoto alt={firstName || \"\"} src={avatarUrl} />}\n      {firstName && (\n        <div>\n          <Text color=\"normal\">\n            <i>\n              Written by <b>{firstName}</b>\n            </i>\n          </Text>\n          <Text color=\"normal\" css={{ marginBottom: 0 }}>\n            {description || null}\n          </Text>\n        </div>\n      )}\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport { styled } from \"../stitches.config\";\nimport { graphql } from \"gatsby\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport parse from \"html-react-parser\";\n\nimport { Bio } from \"../components/Bio\";\nimport { Layout } from \"../components/Layout\";\nimport { SEO } from \"../components/SEO\";\nimport { Container } from \"../components/Container\";\nimport { H1, H2 } from \"../components/Heading\";\nimport { TextLink } from \"../components/Link\";\n\nimport { calculateReadTime, cleanHTML, parseHTML } from \"../utils\";\n\nconst Article = styled(\"article\", {\n  gridColumn: \"2 / -2\",\n\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"$1\",\n\n  margin: \"$2 0\",\n});\n\nconst BlogPostNav = styled(\"nav\", {\n  gridColumn: \"1 / -1\",\n\n  ul: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    flexWrap: \"wrap\",\n    gap: \"$1\",\n\n    listStyle: \"none\",\n    padding: 0,\n\n    \"@mdUp\": {\n      justifyContent: \"space-between\",\n      flexDirection: \"row\",\n    },\n  },\n});\n\nconst PostDetails = styled(H2, {\n  color: \"$textLight\",\n  fontWeight: \"$normal\",\n  fontStyle: \"italic\",\n});\n\nconst BlogPostTemplate = ({ data: { previous, next, post } }) => {\n  const displayFeaturedImage = () => {\n    if (post.featuredImage) {\n      return (\n        <GatsbyImage\n          image={getImage(post.featuredImage.node.localFile)}\n          alt={post.featuredImage.node.altText}\n        />\n      );\n    }\n  };\n\n  return (\n    <Layout>\n      <SEO title={post.title} description={post.excerpt} />\n\n      <Container>\n        <Article>\n          <header>\n            <H1>{parseHTML(post.title)}</H1>\n            <PostDetails>\n              {post.date} • {calculateReadTime(cleanHTML(post.content))} minute read\n            </PostDetails>\n            {displayFeaturedImage()}\n          </header>\n\n          {post.content && <section>{parseHTML(post.content)}</section>}\n\n          <footer>\n            <Bio author={post.author.node} />\n          </footer>\n        </Article>\n\n        <BlogPostNav>\n          <ul>\n            <li>\n              {previous && (\n                <TextLink to={`/post/${previous.slug}`}>← {parseHTML(previous.title)}</TextLink>\n              )}\n            </li>\n\n            <li>{next && <TextLink to={`/post/${next.slug}`}>{parse(next.title)} →</TextLink>}</li>\n          </ul>\n        </BlogPostNav>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostById(\n    # these variables are passed in via createPage.pageContext in gatsby-node.js\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    # selecting the current post by id\n    post: wpPost(id: { eq: $id }) {\n      id\n      excerpt\n      content\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n\n      author {\n        node {\n          id\n          avatar {\n            url\n          }\n          description\n          firstName\n          lastName\n        }\n      }\n\n      featuredImage {\n        node {\n          altText\n          localFile {\n            childImageSharp {\n              gatsbyImageData(\n                layout: FULL_WIDTH\n                quality: 100\n                placeholder: BLURRED\n                formats: [AUTO, WEBP, AVIF]\n              )\n            }\n          }\n        }\n      }\n    }\n\n    # this gets us the previous post by id (if it exists)\n    previous: wpPost(id: { eq: $previousPostId }) {\n      slug\n      title\n    }\n\n    # this gets us the next post by id (if it exists)\n    next: wpPost(id: { eq: $nextPostId }) {\n      slug\n      title\n    }\n  }\n`;\n","// Removes HTML tags included in text.\nexport const cleanHTML = (str) => str.replace(/(<([^>]+)>)/gi, \"\");\n","export const calculateReadTime = (string) => {\n  const WPM = 225;\n  const words = string.trim().split(/\\s+/).length;\n  const time = Math.ceil(words / WPM);\n\n  return time;\n};\n","export const removeExcerptLink = (excerpt: string): string => {\n  return excerpt.split(' <a class=\"more-link\" ')[0];\n};\n","import { styled } from \"../../stitches.config\";\n\nexport const Figure = styled(\"figure\", {\n  width: \"100%\",\n\n  margin: \"$1 0\",\n\n  img: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n\n  figcaption: {\n    fontStyle: \"italic\",\n    textAlign: \"center\",\n    marginTop: \"$1\",\n  },\n});\n","import React from \"react\";\nimport parse, { attributesToProps, domToReact } from \"html-react-parser\";\n\nimport { H1, H2, H3 } from \"../components/Heading\";\nimport { Text } from \"../components/Text\";\nimport { TextLink } from \"../components/Link\";\nimport { Figure } from \"../components/Figure\";\n\nconst mappings = {\n  p: Text,\n  h1: H1,\n  h2: H2,\n  h3: H3,\n  a: TextLink,\n  figure: Figure,\n};\n\nconst options = {\n  replace: (domNode) => {\n    const props = domNode.attribs && attributesToProps(domNode.attribs);\n\n    if (!mappings[domNode.name]) {\n      return;\n    }\n\n    const Element = mappings[domNode.name];\n\n    if (domNode.children) {\n      return <Element {...props}>{domToReact(domNode.children, options)}</Element>;\n    }\n\n    return <Element {...props} />;\n  },\n};\n\nconst options2 = {\n  replace: (domNode) => {\n    if (domNode.attribs && domNode.name === \"p\") {\n      const props = attributesToProps(domNode.attribs);\n      return <Text {...props}>{domToReact(domNode.children)}</Text>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h1\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H1 {...props}>{domToReact(domNode.children)}</H1>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h2\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H2 {...props}>{domToReact(domNode.children)}</H2>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h3\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H3 {...props}>{domToReact(domNode.children)}</H3>;\n    }\n\n    if (domNode.attribs && domNode.name === \"a\") {\n      const props = attributesToProps(domNode.attribs);\n      return <TextLink {...props}>{domToReact(domNode.children)}</TextLink>;\n    }\n\n    if (domNode.attribs && domNode.name === \"figure\") {\n      const props = attributesToProps(domNode.attribs);\n      return <Figure {...props}>{domToReact(domNode.children)}</Figure>;\n    }\n  },\n};\n\nexport const parseHTML = (html: string, customOptions = {}) =>\n  parse(html, { ...options, ...customOptions });\n"],"names":["Wrapper","styled","display","flexDirection","gap","background","padding","ProfilePhoto","width","height","maxWidth","maxHeight","Bio","author","avatar","firstName","description","avatarUrl","url","alt","src","color","css","marginBottom","Article","gridColumn","margin","BlogPostNav","ul","justifyContent","flexWrap","listStyle","PostDetails","H2","fontWeight","fontStyle","data","previous","next","post","title","excerpt","H1","parseHTML","date","calculateReadTime","cleanHTML","content","featuredImage","G","image","getImage","node","localFile","altText","displayFeaturedImage","to","slug","parse","str","replace","string","words","trim","split","length","Math","ceil","removeExcerptLink","Figure","img","figcaption","textAlign","marginTop","mappings","p","Text","h1","h2","h3","H3","a","TextLink","figure","options","domNode","props","attribs","attributesToProps","name","Element","children","domToReact","html","customOptions"],"sourceRoot":""}