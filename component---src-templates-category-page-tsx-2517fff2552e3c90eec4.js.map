{"version":3,"file":"component---src-templates-category-page-tsx-2517fff2552e3c90eec4.js","mappings":"mRAYMA,GAAUC,EAAAA,EAAAA,IAAO,MAAO,CAC5BC,SAAU,WAEV,UAAW,CACTC,QAAS,GACTD,SAAU,WACVE,MAAO,OACPC,OAAQ,OACRC,IAAK,EACLC,KAAM,EACNC,WAAY,0DACZC,QAAS,GACTC,WAAY,iBAGd,gBAAiB,CACfD,QAAS,OAIPE,GAAOV,EAAAA,EAAAA,IAAO,MAAO,CACzBC,SAAU,WACVI,IAAK,EACLC,KAAM,EAENH,MAAO,OACPC,OAAQ,4BAERO,QAAS,SAGLC,GAAQZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAI,CACvBC,MAAO,UACPC,WAAY,KACZC,eAAgB,OAEhBC,OAAQ,IAGJC,GAAUlB,EAAAA,EAAAA,IAAOmB,EAAAA,EAAW,CAChClB,SAAU,WACVmB,OAAQ,EAERC,QAAS,OACTC,cAAe,SACfC,eAAgB,MAChBC,IAAK,KAELC,UAAW,MAGPC,GAAmBC,EAAAA,EAAAA,IAAI,CAC3BC,UAAW,IACXH,UAAW,IAEXxB,SAAU,WACVG,OAAQ,SAGJyB,GAAU7B,EAAAA,EAAAA,IAAO8B,EAAAA,EAAM,CAC3BhB,MAAO,UACPiB,WAAY,YACZC,SAAU,KACVjB,WAAY,KAEZE,OAAQ,EAERI,QAAS,OAET,QAAS,CACPA,QAAS,WAIAY,EAAkB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,cAoBtD,OACE,gBAACtC,EAAD,CAASuC,MAAO,CAAEC,WAAY,SAC5B,gBAAC,IAAD,CAAcC,GAAE,SAAWJ,GApBP,OAAlBC,EAEA,gBAAC,EAAAI,EAAD,CACEC,IAAI,oCACJC,IAAI,4BACJC,UAAWlB,IAHb,sBAQF,gBAAC,EAAAmB,EAAD,CACEC,OAAOC,EAAAA,EAAAA,GAASV,EAAcW,KAAKC,WACnCN,IAAI,GACJC,UAAWlB,MASX,gBAAChB,EAAD,KACE,gBAACQ,EAAD,KACE,gBAACN,EAAD,KAAQsB,IACPgB,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAkBhB,GAAU,CACrCiB,QAAS,SAACC,GACR,GAAIA,EAAQC,SAA4B,MAAjBD,EAAQE,KAAc,CAC3C,IAAMC,GAAQC,EAAAA,EAAAA,IAAkBJ,EAAQC,SACxC,OACE,gBAACzB,EAAD,eAASf,MAAM,SAAY0C,IACxBE,EAAAA,EAAAA,IAAWL,EAAQM,oB,UC7GpCC,GAAiB5D,EAAAA,EAAAA,IAAO,MAAO,CACnCqB,QAAS,OACTwC,oBAAqB,0CACrBC,WAAY,KACZC,cAAe,KACfC,UAAW,KACXC,aAAc,OAGVC,GAAclE,EAAAA,EAAAA,IAAO,MAAO,CAChCC,SAAU,WAEVkE,gBAAiB,QAEjB1C,UAAW,MAGP2C,GAAWpE,EAAAA,EAAAA,IAAO,MAAO,CAC7BqB,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAEhBtB,SAAU,WACVI,IAAK,EACLC,KAAM,EAENK,QAAS,KAETR,MAAO,4BACPC,OAAQ,4BAERG,WAAY,uBAEZE,WAAY,mBAEZ,UAAW,CACTF,WAAY,2BAIV8D,GAAYrE,EAAAA,EAAAA,IAAOsE,EAAAA,GAAI,CAC3B3D,QAAS,QACT4D,WAAY,MACZzD,MAAO,SAGH0D,GAAaxE,EAAAA,EAAAA,IAAO,IAAK,CAC7Bc,MAAO,wBACPH,QAAS,QAGL8D,GAAkB9C,EAAAA,EAAAA,IAAI,CAAE+C,UAAW,QAAStE,OAAQ,OAAQH,SAAU,UAmE5E,EAjEyB,SAAC,GAAsC,IAAD,IAAnC0E,YAAepB,EAAoB,EAApBA,KAAMqB,EAAc,EAAdA,MAoB/C,OAA2B,IAAvBA,EAAMC,MAAMC,OAEZ,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAK9C,MAAOqB,IACZ,gBAACpC,EAAA,EAAD,CAAWQ,IAAK,CAAEsD,WAAY,OAC5B,gBAAC,EAAApE,GAAD,CAAIyB,MAAO,CAAEC,WAAY,SAAWgB,GACpC,qBAAGjB,MAAO,CAAEC,WAAY,SAAxB,8EAQJ,gBAACwC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAK9C,MAAOqB,IACZ,gBAACpC,EAAA,EAAD,CAAWQ,IAAK,CAAEqC,UAAW,OAC3B,gBAAC,EAAAnD,GAAD,CAAIyB,MAAO,CAAEC,WAAY,SAAWgB,GACpC,gBAACtB,EAAD,CACEG,KAAMwC,EAAMC,MAAM,GAAGzC,KACrBC,cAAeuC,EAAMC,MAAM,GAAGxC,cAC9BH,MAAO0C,EAAMC,MAAM,GAAG3C,MACtBC,QAASyC,EAAMC,MAAM,GAAG1C,UAE1B,gBAACyB,EAAD,CAAgBtB,MAAO,CAAEC,WAAY,SAClCqC,EAAMC,MAAMK,MAAM,GAAGC,KAAI,YAA6C,IAA1C/C,EAAyC,EAAzCA,KAAMF,EAAmC,EAAnCA,MAAOkD,EAA4B,EAA5BA,OAAQ/C,EAAoB,EAApBA,cAChD,OACE,gBAAC6B,EAAD,CAAamB,IAAKjD,GAChB,gBAAC,IAAD,CAAcI,GAAE,SAAWJ,GA/ClB,SAACC,GACxB,OAAsB,OAAlBA,EAEA,gBAAC,EAAAI,EAAD,CACEC,IAAI,oCACJC,IAAI,4BACJC,UAAW6B,IAHb,sBAQF,gBAAC,EAAA5B,EAAD,CACEC,OAAOC,EAAAA,EAAAA,GAASV,EAAcW,KAAKC,WACnCN,IAAI,GACJC,UAAW6B,MAkCEa,CAAiBjD,GAClB,gBAAC+B,EAAD,KACE,gBAACC,EAAD,CAAW/B,MAAO,CAAEC,WAAY,SAAWL,GAC3C,gBAACsC,EAAD,KAAaY,EAAOpC,KAAKO,iB,wJClHxC,IAAMgC,EAAY,SAACC,GAAD,OAASA,EAAIpC,QAAQ,gBAAiB,K,UCDlDqC,EAAoB,SAACC,GAChC,IACMC,EAAQD,EAAOE,OAAOC,MAAM,OAAOf,OAGzC,OAFagB,KAAKC,KAAKJ,EAFX,MCDDxC,EAAoB,SAAChB,GAChC,OAAOA,EAAQ0D,MAAM,0BAA0B,I,kDCCpCG,GAAShG,E,OAAAA,IAAO,SAAU,CACrCG,MAAO,OAEPc,OAAQ,OAERgF,IAAK,CACH9F,MAAO,OACPC,OAAQ,QAGV8F,WAAY,CACVC,UAAW,SACXC,UAAW,SACXpC,UAAW,QCPTqC,EAAW,CACfC,EAAGxE,EAAAA,EACHyE,GAAI1F,EAAAA,GACJ2F,GAAIlC,EAAAA,GACJmC,GAAIC,EAAAA,GACJC,EAAGC,EAAAA,EACHC,OAAQb,GAGJc,EAAU,CACd1D,QAAS,SAACC,GACR,IAAMG,EAAQH,EAAQC,UAAWG,EAAAA,EAAAA,IAAkBJ,EAAQC,SAE3D,GAAK+C,EAAShD,EAAQE,MAAtB,CAIA,IAAMwD,EAAUV,EAAShD,EAAQE,MAEjC,OAAIF,EAAQM,SACH,gBAACoD,EAAYvD,GAAQE,EAAAA,EAAAA,IAAWL,EAAQM,SAAUmD,IAGpD,gBAACC,EAAYvD,MAsCXN,EAAY,SAAC8D,EAAcC,GAAf,gBAAeA,IAAAA,EAAgB,KACtDC,EAAAA,EAAAA,IAAMF,EAAD,iBAAYF,EAAYG,M","sources":["webpack://lemon-press-website/./src/components/CategoryFeature/index.tsx","webpack://lemon-press-website/./src/templates/category-page.tsx","webpack://lemon-press-website/./src/utils/cleanHTML.ts","webpack://lemon-press-website/./src/utils/calculateReadTime.ts","webpack://lemon-press-website/./src/utils/removeExcerptLink.ts","webpack://lemon-press-website/./src/components/Figure/index.tsx","webpack://lemon-press-website/./src/utils/parseHTML.tsx"],"sourcesContent":["import React from \"react\";\nimport { GatsbyImage, getImage, StaticImage } from \"gatsby-plugin-image\";\nimport { attributesToProps, domToReact } from \"html-react-parser\";\nimport { styled, css } from \"../../stitches.config\";\n\nimport { Text } from \"../Text\";\nimport { Container } from \"../Container\";\nimport { H1 } from \"../Heading\";\n\nimport { UnstyledLink } from \"../Link/\";\nimport { removeExcerptLink, parseHTML } from \"../../utils\";\n\nconst Wrapper = styled(\"div\", {\n  position: \"relative\",\n\n  \"&:after\": {\n    content: \"\",\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    top: 0,\n    left: 0,\n    background: \"linear-gradient(hsla(0, 0%, 0%, 0), hsla(0, 0%, 0%, 1))\",\n    opacity: 0.7,\n    transition: \"opacity $ease\",\n  },\n\n  \"&:hover:after\": {\n    opacity: 0.85,\n  },\n});\n\nconst Body = styled(\"div\", {\n  position: \"relative\",\n  top: 0,\n  left: 0,\n\n  width: \"100%\",\n  height: \"calc(100% - 2 * $space$2)\",\n\n  padding: \"$2 0\",\n});\n\nconst Title = styled(H1, {\n  color: \"#FFFFFF\",\n  textShadow: \"$1\",\n  textDecoration: \"none\",\n\n  margin: 0,\n});\n\nconst Content = styled(Container, {\n  position: \"relative\",\n  zIndex: 1,\n\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"end\",\n  gap: \"$1\",\n\n  minHeight: 350,\n});\n\nconst featuredImageCSS = css({\n  maxHeight: 480,\n  minHeight: 300,\n\n  position: \"absolute\",\n  height: \"100%\",\n});\n\nconst Excerpt = styled(Text, {\n  color: \"#FFFFFF\",\n  fontWeight: \"$semibold\",\n  fontSize: \"$3\",\n  textShadow: \"$1\",\n\n  margin: 0,\n\n  display: \"none\",\n\n  \"@lgUp\": {\n    display: \"block\",\n  },\n});\n\nexport const CategoryFeature = ({ title, excerpt, slug, featuredImage }) => {\n  const displayImage = () => {\n    if (featuredImage === null) {\n      return (\n        <StaticImage\n          src=\"../../media/replacement-image.jpg\"\n          alt=\"Preview image for article\"\n          className={featuredImageCSS()}\n        />\n      );\n    }\n    return (\n      <GatsbyImage\n        image={getImage(featuredImage.node.localFile)}\n        alt=\"\"\n        className={featuredImageCSS()}\n      />\n    );\n  };\n\n  return (\n    <Wrapper style={{ gridColumn: \"1/-1\" }}>\n      <UnstyledLink to={`/post/${slug}`}>\n        {displayImage()}\n        <Body>\n          <Content>\n            <Title>{title}</Title>\n            {parseHTML(removeExcerptLink(excerpt), {\n              replace: (domNode) => {\n                if (domNode.attribs && domNode.name === \"p\") {\n                  const props = attributesToProps(domNode.attribs);\n                  return (\n                    <Excerpt color=\"white\" {...props}>\n                      {domToReact(domNode.children)}\n                    </Excerpt>\n                  );\n                }\n              },\n            })}\n          </Content>\n        </Body>\n      </UnstyledLink>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport { css, styled } from \"../stitches.config\";\nimport { Layout } from \"../components/Layout\";\nimport { H1, H2 } from \"../components/Heading\";\nimport { Container } from \"../components/Container\";\nimport { UnstyledLink } from \"../components/Link\";\nimport { CategoryFeature } from \"../components/CategoryFeature\";\nimport { getImage, StaticImage, GatsbyImage } from \"gatsby-plugin-image\";\nimport { SEO } from \"../components/SEO\";\n\nconst PostListHolder = styled(\"div\", {\n  display: \"grid\",\n  gridTemplateColumns: \"repeat( auto-fill, minmax(250px, 1fr) )\",\n  gridRowGap: \"$2\",\n  gridColumnGap: \"$1\",\n  marginTop: \"$2\",\n  marginBottom: \"$1\",\n});\n\nconst PostPreview = styled(\"div\", {\n  position: \"relative\",\n\n  backgroundColor: \"$text\",\n\n  minHeight: 250,\n});\n\nconst PostInfo = styled(\"div\", {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-between\",\n\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n\n  padding: \"$1\",\n\n  width: \"calc(100% - 2 * $space$1)\",\n  height: \"calc(100% - 2 * $space$1)\",\n\n  background: \"hsla(0, 0%, 0%, 0.5)\",\n\n  transition: \"background $ease\",\n\n  \"&:hover\": {\n    background: \"hsla(0, 0%, 0%, 0.75)\",\n  },\n});\n\nconst PostTitle = styled(H2, {\n  padding: \"0.2em\",\n  lineHeight: \"1.4\",\n  color: \"#fff\",\n});\n\nconst PostAuthor = styled(\"p\", {\n  color: \"rgba(255,255,255,0.8)\",\n  padding: \"2px\",\n});\n\nconst backgroundImage = css({ objectFit: \"cover\", height: \"100%\", position: \"float\" });\n\nconst BlogPostTemplate = ({ pageContext: { name, posts } }) => {\n  const displayListImage = (featuredImage) => {\n    if (featuredImage === null) {\n      return (\n        <StaticImage\n          src=\"../../media/replacement-image.jpg\"\n          alt=\"Preview image for article\"\n          className={backgroundImage()}\n        />\n      );\n    }\n    return (\n      <GatsbyImage\n        image={getImage(featuredImage.node.localFile)}\n        alt=\"\"\n        className={backgroundImage()}\n      />\n    );\n  };\n\n  if (posts.nodes.length === 0) {\n    return (\n      <Layout>\n        <SEO title={name} />\n        <Container css={{ paddingTop: \"$1\" }}>\n          <H1 style={{ gridColumn: \"1/13\" }}>{name}</H1>\n          <p style={{ gridColumn: \"1/13\" }}>\n            There are no articles for this category yet, we really should right some\n          </p>\n        </Container>\n      </Layout>\n    );\n  } else {\n    return (\n      <Layout>\n        <SEO title={name} />\n        <Container css={{ marginTop: \"$2\" }}>\n          <H1 style={{ gridColumn: \"1/-1\" }}>{name}</H1>\n          <CategoryFeature\n            slug={posts.nodes[0].slug}\n            featuredImage={posts.nodes[0].featuredImage}\n            title={posts.nodes[0].title}\n            excerpt={posts.nodes[0].excerpt}\n          />\n          <PostListHolder style={{ gridColumn: \"1/-1\" }}>\n            {posts.nodes.slice(1).map(({ slug, title, author, featuredImage }) => {\n              return (\n                <PostPreview key={slug}>\n                  <UnstyledLink to={`/post/${slug}`}>\n                    {displayListImage(featuredImage)}\n                    <PostInfo>\n                      <PostTitle style={{ gridColumn: \"1/13\" }}>{title}</PostTitle>\n                      <PostAuthor>{author.node.name}</PostAuthor>\n                    </PostInfo>\n                  </UnstyledLink>\n                </PostPreview>\n              );\n            })}\n          </PostListHolder>\n        </Container>\n      </Layout>\n    );\n  }\n};\n\nexport default BlogPostTemplate;\n","// Removes HTML tags included in text.\nexport const cleanHTML = (str) => str.replace(/(<([^>]+)>)/gi, \"\");\n","export const calculateReadTime = (string) => {\n  const WPM = 225;\n  const words = string.trim().split(/\\s+/).length;\n  const time = Math.ceil(words / WPM);\n\n  return time;\n};\n","export const removeExcerptLink = (excerpt: string): string => {\n  return excerpt.split(' <a class=\"more-link\" ')[0];\n};\n","import { styled } from \"../../stitches.config\";\n\nexport const Figure = styled(\"figure\", {\n  width: \"100%\",\n\n  margin: \"$1 0\",\n\n  img: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n\n  figcaption: {\n    fontStyle: \"italic\",\n    textAlign: \"center\",\n    marginTop: \"$1\",\n  },\n});\n","import React from \"react\";\nimport parse, { attributesToProps, domToReact } from \"html-react-parser\";\n\nimport { H1, H2, H3 } from \"../components/Heading\";\nimport { Text } from \"../components/Text\";\nimport { TextLink } from \"../components/Link\";\nimport { Figure } from \"../components/Figure\";\n\nconst mappings = {\n  p: Text,\n  h1: H1,\n  h2: H2,\n  h3: H3,\n  a: TextLink,\n  figure: Figure,\n};\n\nconst options = {\n  replace: (domNode) => {\n    const props = domNode.attribs && attributesToProps(domNode.attribs);\n\n    if (!mappings[domNode.name]) {\n      return;\n    }\n\n    const Element = mappings[domNode.name];\n\n    if (domNode.children) {\n      return <Element {...props}>{domToReact(domNode.children, options)}</Element>;\n    }\n\n    return <Element {...props} />;\n  },\n};\n\nconst options2 = {\n  replace: (domNode) => {\n    if (domNode.attribs && domNode.name === \"p\") {\n      const props = attributesToProps(domNode.attribs);\n      return <Text {...props}>{domToReact(domNode.children)}</Text>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h1\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H1 {...props}>{domToReact(domNode.children)}</H1>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h2\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H2 {...props}>{domToReact(domNode.children)}</H2>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h3\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H3 {...props}>{domToReact(domNode.children)}</H3>;\n    }\n\n    if (domNode.attribs && domNode.name === \"a\") {\n      const props = attributesToProps(domNode.attribs);\n      return <TextLink {...props}>{domToReact(domNode.children)}</TextLink>;\n    }\n\n    if (domNode.attribs && domNode.name === \"figure\") {\n      const props = attributesToProps(domNode.attribs);\n      return <Figure {...props}>{domToReact(domNode.children)}</Figure>;\n    }\n  },\n};\n\nexport const parseHTML = (html: string, customOptions = {}) =>\n  parse(html, { ...options, ...customOptions });\n"],"names":["Wrapper","styled","position","content","width","height","top","left","background","opacity","transition","Body","padding","Title","H1","color","textShadow","textDecoration","margin","Content","Container","zIndex","display","flexDirection","justifyContent","gap","minHeight","featuredImageCSS","css","maxHeight","Excerpt","Text","fontWeight","fontSize","CategoryFeature","title","excerpt","slug","featuredImage","style","gridColumn","to","S","src","alt","className","G","image","getImage","node","localFile","parseHTML","removeExcerptLink","replace","domNode","attribs","name","props","attributesToProps","domToReact","children","PostListHolder","gridTemplateColumns","gridRowGap","gridColumnGap","marginTop","marginBottom","PostPreview","backgroundColor","PostInfo","PostTitle","H2","lineHeight","PostAuthor","backgroundImage","objectFit","pageContext","posts","nodes","length","Layout","SEO","paddingTop","slice","map","author","key","displayListImage","cleanHTML","str","calculateReadTime","string","words","trim","split","Math","ceil","Figure","img","figcaption","fontStyle","textAlign","mappings","p","h1","h2","h3","H3","a","TextLink","figure","options","Element","html","customOptions","parse"],"sourceRoot":""}