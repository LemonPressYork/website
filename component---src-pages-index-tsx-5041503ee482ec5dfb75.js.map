{"version":3,"file":"component---src-pages-index-tsx-5041503ee482ec5dfb75.js","mappings":"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","sources":["webpack://lemon-press-website/./src/components/PrintIssues/PrintIssueCard.tsx","webpack://lemon-press-website/./src/components/FeaturedPost/index.tsx","webpack://lemon-press-website/./src/components/FeaturedPost/getFeaturedPost.ts","webpack://lemon-press-website/./src/components/CategoryPost/CategoryPost.tsx","webpack://lemon-press-website/./src/components/CategoryPost/CategoryGrid.tsx","webpack://lemon-press-website/./src/components/CategoryPost/getCategoryPosts.ts","webpack://lemon-press-website/./src/components/LatestIssue/index.tsx","webpack://lemon-press-website/./src/components/LatestIssue/getLatestIssue.tsx","webpack://lemon-press-website/./src/components/LatestArticlesList/index.tsx","webpack://lemon-press-website/./src/components/LatestArticlesList/getLatestArticles.tsx","webpack://lemon-press-website/./src/pages/index.tsx","webpack://lemon-press-website/./src/utils/getCategoryPreviews.tsx","webpack://lemon-press-website/./src/utils/cleanHTML.ts","webpack://lemon-press-website/./src/utils/calculateReadTime.ts","webpack://lemon-press-website/./src/utils/removeExcerptLink.ts","webpack://lemon-press-website/./src/components/Figure/index.tsx","webpack://lemon-press-website/./src/utils/parseHTML.tsx"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"../../stitches.config\";\nimport { TextLink, UnstyledLink } from \"../Link\";\nimport { Text } from \"../Text\";\n\nconst Wrapper = styled(\"div\", {\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  margin: \"20px\",\n});\n\nconst Preview = styled(\"img\", {\n  minWidth: \"200px\",\n  width: \"100%\",\n  marginTop: \"10px\",\n});\n\nconst Title = styled(TextLink, {\n  textDecoration: \"none\",\n  textAlign: \"center\",\n  fontSize: \"$3\",\n  fontWeight: \"$bold\",\n  fontFamily: \"$sans\",\n  color: \"$text\",\n  marginTop: \"10px\",\n  marginBottom: \"5px\",\n});\n\nconst Date = styled(Text, {\n  marginTop: \"0px\",\n});\n\nexport const PrintIssueCard = ({ title, date, image, link }) => {\n  return (\n    <Wrapper>\n      <UnstyledLink to={link}>\n        <Preview src={image} />\n      </UnstyledLink>\n      <Title to={link}>{title}</Title>\n      <Date>{date}</Date>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport { attributesToProps, domToReact } from \"html-react-parser\";\nimport { styled, css } from \"../../stitches.config\";\n\nimport { Text } from \"../Text\";\nimport { Container } from \"../Container\";\nimport { H1 } from \"../Heading\";\n\nimport { UnstyledLink } from \"../Link/\";\nimport { getFeaturedPost } from \"./getFeaturedPost\";\nimport { removeExcerptLink, parseHTML } from \"../../utils\";\n\nconst Wrapper = styled(\"div\", {\n  position: \"relative\",\n\n  \"&:after\": {\n    content: \"\",\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    top: 0,\n    left: 0,\n    background: \"linear-gradient(hsla(0, 0%, 0%, 0), hsla(0, 0%, 0%, 1))\",\n    opacity: 0.7,\n    transition: \"opacity $ease\",\n  },\n\n  \"&:hover:after\": {\n    opacity: 0.85,\n  },\n});\n\nconst Body = styled(\"div\", {\n  position: \"relative\",\n  top: 0,\n  left: 0,\n\n  width: \"100%\",\n  height: \"calc(100% - 2 * $space$2)\",\n\n  padding: \"$2 0\",\n});\n\nconst Title = styled(H1, {\n  color: \"#FFFFFF\",\n  textShadow: \"$1\",\n  textDecoration: \"none\",\n\n  margin: 0,\n});\n\nconst Content = styled(Container, {\n  position: \"relative\",\n\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"end\",\n  gap: \"$1\",\n\n  zIndex: 1,\n  minHeight: 350,\n});\n\nconst featuredImageCSS = css({\n  maxHeight: 480,\n  minHeight: 300,\n  width: \"100%\",\n  position: \"absolute\",\n  height: \"100%\",\n});\n\nconst Excerpt = styled(Text, {\n  fontWeight: \"$semibold\",\n  fontSize: \"$3\",\n  textShadow: \"$1\",\n\n  margin: 0,\n\n  display: \"none\",\n\n  \"@lgUp\": {\n    display: \"block\",\n  },\n});\n\nexport const FeaturedPost = (): JSX.Element => {\n  const { title, excerpt, slug, featuredImage } = getFeaturedPost();\n\n  const image = getImage(featuredImage.node.localFile);\n\n  return (\n    <UnstyledLink to={`/post/${slug}`}>\n      <Wrapper>\n        <GatsbyImage image={image} alt=\"\" className={featuredImageCSS()} />\n        <Body>\n          <Content>\n            <Title>{title}</Title>\n            {parseHTML(removeExcerptLink(excerpt), {\n              replace: (domNode) => {\n                if (domNode.attribs && domNode.name === \"p\") {\n                  const props = attributesToProps(domNode.attribs);\n                  return (\n                    <Excerpt color=\"white\" {...props}>\n                      {domToReact(domNode.children)}\n                    </Excerpt>\n                  );\n                }\n              },\n            })}\n          </Content>\n        </Body>\n      </Wrapper>\n    </UnstyledLink>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\ntype Post = {\n  title: string;\n  excerpt: string;\n  slug: string;\n  featuredImage: { node: { id; sourceUrl; localFile } };\n};\n\nexport const getFeaturedPost = (): Post => {\n  const {\n    allWpPost: { posts },\n  } = useStaticQuery(graphql`\n    query postData {\n      allWpPost(filter: { isSticky: { eq: true } }, sort: { fields: date, order: DESC }, limit: 1) {\n        posts: edges {\n          node {\n            title\n            excerpt\n            slug\n            featuredImage {\n              node {\n                id\n                sourceUrl\n                localFile {\n                  id\n                  childImageSharp {\n                    gatsbyImageData(\n                      layout: FULL_WIDTH\n                      height: 480\n                      placeholder: BLURRED\n                      formats: [AUTO, WEBP, AVIF]\n                    )\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const { node } = posts[0];\n\n  return node;\n};\n","import React from \"react\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport { styled, css } from \"../../stitches.config\";\n\nimport { Text } from \"../Text\";\nimport { UnstyledLink } from \"../Link/UnstyledLink\";\nimport { H2 } from \"../Heading\";\n\nconst Wrapper = styled(\"div\", {\n  position: \"relative\",\n\n  backgroundColor: \"$text\",\n\n  minHeight: 250,\n  maxHeight: 250,\n});\n\nconst CategoryBubble = styled(UnstyledLink, {\n  padding: \"5px $1\",\n\n  display: \"block\",\n\n  width: \"min-content\",\n\n  color: \"$text\",\n  backgroundColor: \"white\",\n  fontWeight: \"$bold\",\n  fontSize: \"$1\",\n\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n\n  borderRadius: \"9999px\",\n\n  transition: \"background-color $ease, color $ease\",\n\n  \"&:hover\": {\n    backgroundColor: \"black\",\n    color: \"white\",\n  },\n});\n\nconst Title = styled(H2, {\n  color: \"$background\",\n  fontSize: \"$3\",\n});\n\nconst backgroundImage = css({ objectFit: \"cover\", height: \"100%\" });\n\nconst Body = styled(\"div\", {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-between\",\n\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n\n  padding: \"$1\",\n\n  width: \"calc(100% - 2 * $space$1)\",\n  height: \"calc(100% - 2 * $space$1)\",\n\n  background: \"hsla(0, 0%, 0%, 0.5)\",\n\n  transition: \"background $ease\",\n\n  \"&:hover\": {\n    background: \"hsla(0, 0%, 0%, 0.75)\",\n  },\n});\n\nconst PostImage = ({ image }) => {\n  if (image === undefined) {\n    return (\n      <StaticImage\n        src=\"../../media/replacement-image.jpg\"\n        alt=\"Preview image for article\"\n        className={backgroundImage()}\n      />\n    );\n  }\n\n  return (\n    <GatsbyImage image={image} alt=\"Preview image for article\" className={backgroundImage()} />\n  );\n};\n\nexport const CategoryPost = ({ title, to, category, image }) => {\n  return (\n    <Wrapper>\n      <UnstyledLink to={`/post/${to}`}>\n        <PostImage image={image} />\n        <Body>\n          <Title>{title}</Title>\n          <UnstyledLink to=\"\">\n            <CategoryBubble to={`/category/${category.slug}`}>{category.name}</CategoryBubble>\n          </UnstyledLink>\n        </Body>\n      </UnstyledLink>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport { getImage } from \"gatsby-plugin-image\";\nimport { styled } from \"../../stitches.config\";\n\nimport { CategoryPost } from \"./CategoryPost\";\nimport { getCategoryPosts } from \"./getCategoryPosts\";\n\nconst Grid = styled(\"div\", {\n  display: \"grid\",\n  gridTemplateColumns: \"1fr\",\n  gridColumnGap: \"$1\",\n  gridRowGap: \"$1\",\n\n  margin: \"calc(2 * $1) 0\",\n\n  \"@mdUp\": {\n    gridTemplateColumns: \"repeat( 2, minmax(250px, 1fr) )\",\n  },\n});\n\ninterface Props {\n  css: { [key: string]: string };\n}\n\nexport const CategoryGrid = ({ css }: Props): JSX.Element => {\n  const posts = getCategoryPosts();\n\n  return (\n    <Grid css={css}>\n      {posts.map(\n        ({\n          node: {\n            title,\n            slug,\n            categories: { nodes },\n            featuredImage,\n          },\n        }) => (\n          <CategoryPost\n            title={title}\n            to={slug}\n            key={slug}\n            category={{ name: nodes[0].name, slug: nodes[0].slug }}\n            image={getImage(featuredImage?.node.localFile)}\n          />\n        ),\n      )}\n    </Grid>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\ntype Post = {\n  node: {\n    title: string;\n    excerpt: string;\n    slug: string;\n    content: string;\n    featuredImage: { node: { id; sourceUrl; localFile } };\n    categories: { nodes };\n  };\n};\n\nexport const getCategoryPosts = (): Post[] => {\n  const {\n    allWpPost: { posts },\n  } = useStaticQuery(graphql`\n    {\n      allWpPost(sort: { fields: date, order: DESC }, limit: 8) {\n        posts: edges {\n          node {\n            title\n            slug\n            content\n            categories {\n              nodes {\n                name\n                slug\n              }\n            }\n            featuredImage {\n              node {\n                id\n                localFile {\n                  childImageSharp {\n                    id\n                    gatsbyImageData(\n                      layout: CONSTRAINED\n                      placeholder: BLURRED\n                      formats: [AUTO, WEBP, AVIF]\n                    )\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return posts.slice(4);\n};\n","import React from \"react\";\nimport { styled } from \"../../stitches.config\";\nimport { PrintIssueCard } from \"../PrintIssues/PrintIssueCard\";\nimport { getLatestIssue } from \"./getLatestIssue\";\n\nconst Wrapper = styled(\"div\", {\n  width: \"300px\",\n});\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const LatestIssue = ({ css }) => {\n  const { title, epoch, documentId, docname } = getLatestIssue();\n\n  const date = new Date(epoch);\n\n  return (\n    <Wrapper style={css}>\n      <PrintIssueCard\n        title={title}\n        date={`${monthNames[date.getMonth()]} ${date.getFullYear()}`}\n        link={`https://issuu.com/thelemonpress/docs/${docname}`}\n        image={`https://image.issuu.com/${documentId}/jpg/page_1_thumb_large.jpg`}></PrintIssueCard>\n    </Wrapper>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\ntype LatestIssue = {\n  title: string;\n  epoch: string;\n  documentId: string;\n  docname: string;\n};\n\nexport const getLatestIssue = (): LatestIssue => {\n  const {\n    allIssues: { edges: issues },\n  } = useStaticQuery(graphql`\n    query LatestIssue {\n      allIssues(limit: 1) {\n        edges {\n          node {\n            title\n            epoch\n            documentId\n            docname\n          }\n        }\n      }\n    }\n  `);\n\n  const { node } = issues[0];\n\n  return node;\n};\n","import { getImage, GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\nimport { styled } from \"../../stitches.config\";\nimport { calculateReadTime } from \"../../utils\";\nimport { H2, H3 } from \"../Heading\";\nimport { UnstyledLink } from \"../Link\";\nimport { getLatestArticles } from \"./getLatestArticles\";\n\nconst Holder = styled(\"div\", {\n  padding: \"$2\",\n});\n\nconst ArticleHolder = styled(\"div\", {\n  marginTop: \"$1\",\n  marginBottom: \"$1\",\n  display: \"grid\",\n  gridColumnGap: \"$1\",\n  gridTemplateColumns: \"repeat(8, 1fr)\",\n  alignItems: \"center\",\n});\n\nconst DetailsHoder = styled(\"div\", {});\n\nconst PostImage = ({ image }) => {\n  if (image === undefined) {\n    return (\n      <StaticImage\n        src=\"../../media/replacement-image.jpg\"\n        alt=\"Preview image for article\"\n        style={{ gridColumn: \"6/-1\", minHeight: \"105px\", maxHeight: \"105px\" }}\n      />\n    );\n  }\n\n  return (\n    <GatsbyImage\n      image={image}\n      alt=\"Preview image for article\"\n      style={{ gridColumn: \"6/-1\", minHeight: \"105px\", maxHeight: \"105px\" }}\n    />\n  );\n};\n\nconst LatestArticleList = ({ css }) => {\n  const posts = getLatestArticles();\n  return (\n    <Holder css={css}>\n      <H2>Latest Articles</H2>\n      {posts.map(({ node: { title, slug, content, featuredImage } }) => (\n        <ArticleHolder>\n          <DetailsHoder style={{ gridColumn: \"1/6\" }}>\n            <H3>\n              <UnstyledLink to={`/post/${slug}`}>{title}</UnstyledLink>\n            </H3>\n            <p>{calculateReadTime(content)} minute read</p>\n          </DetailsHoder>\n          <PostImage image={getImage(featuredImage?.node.localFile)} />\n        </ArticleHolder>\n      ))}\n    </Holder>\n  );\n};\n\nexport default LatestArticleList;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\ntype Post = {\n  node: {\n    title: string;\n    excerpt: string;\n    slug: string;\n    content: string;\n    featuredImage: { node: { id; sourceUrl; localFile } };\n    categories: { nodes };\n  };\n};\n\nexport const getLatestArticles = (): Post[] => {\n  const {\n    allWpPost: { posts },\n  } = useStaticQuery(graphql`\n    {\n      allWpPost(sort: { fields: date, order: DESC }, limit: 4) {\n        posts: edges {\n          node {\n            title\n            slug\n            content\n            categories {\n              nodes {\n                name\n                slug\n              }\n            }\n            featuredImage {\n              node {\n                id\n                localFile {\n                  childImageSharp {\n                    id\n                    gatsbyImageData(\n                      layout: CONSTRAINED\n                      placeholder: BLURRED\n                      formats: [AUTO, WEBP, AVIF]\n                    )\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return posts;\n};\n","import React from \"react\";\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\";\n\nimport { Container } from \"../components/Container\";\nimport { Layout } from \"../components/Layout\";\nimport { FeaturedPost } from \"../components/FeaturedPost\";\nimport { CategoryGrid } from \"../components/CategoryPost\";\nimport { LatestIssue } from \"../components/LatestIssue\";\nimport { getCategoryPreviews } from \"../utils/getCategoryPreviews\";\nimport { styled } from \"../stitches.config\";\nimport { H2 } from \"../components/Heading\";\nimport { UnstyledLink } from \"../components/Link\";\nimport { SEO } from \"../components/SEO\";\nimport LatestArticleList from \"../components/LatestArticlesList\";\n\nimport { breakpoints, calculateReadTime, parseHTML, removeExcerptLink } from \"../utils\";\n\nimport { useMediaQuery } from \"../hooks/useMediaQuery\";\n\nconst CategoryPreview = styled(\"div\", {\n  padding: \"$1\",\n});\n\nconst PreviewWrapper = styled(\"div\", {\n  display: \"grid\",\n  gridColumnGap: \"$1\",\n  gridTemplateColumns: \"auto 200px\",\n});\n\nconst CategoryName = styled(H2, {\n  color: \"$textLight\",\n  fontSize: \"2em\",\n});\n\nconst Seperator = styled(\"div\", {\n  width: \"100%\",\n  height: \"2px\",\n  backgroundColor: \"black\",\n  marginBottom: \"$1\",\n});\n\nconst previewImageStyle = {\n  minHeight: \"150px\",\n  maxHeight: \"150px\",\n  justifySelf: \"center\",\n  alignSelf: \"center\",\n};\n\nconst Home = (): JSX.Element => {\n  const isDesktop = useMediaQuery(breakpoints.landingMid);\n  const { first, remaining } = getCategoryPreviews();\n\n  const displayImage = (featuredImage) => {\n    if (featuredImage) {\n      return (\n        <GatsbyImage\n          image={getImage(featuredImage.node.localFile)}\n          alt=\"\"\n          style={previewImageStyle}\n        />\n      );\n    }\n  };\n\n  if (isDesktop) {\n    return (\n      <Layout>\n        <SEO title=\"Home\" />\n        <FeaturedPost />\n        <Container>\n          <CategoryGrid css={{ gridColumn: \"1/8\", gridRow: \"1/4\" }} />\n          <LatestArticleList css={{ gridColumn: \"8/-1\", gridRow: \"1/8\" }} />\n          <CategoryPreview css={{ gridColumn: \"1/10\" }}>\n            <UnstyledLink to={`/category/${first.node.slug}`}>\n              <CategoryName>{first.node.name}</CategoryName>\n            </UnstyledLink>\n            {first.node.posts.nodes.slice(0, 2).map(\n              ({\n                slug,\n                title,\n                content,\n                excerpt,\n                featuredImage,\n                author: {\n                  node: { name },\n                },\n              }) => {\n                if (featuredImage) {\n                  return (\n                    <>\n                      <PreviewWrapper>\n                        <div>\n                          <UnstyledLink to={`/post/${slug}`}>\n                            <H2>{title}</H2>\n                          </UnstyledLink>\n                          <p>\n                            <b>{name}</b> | {calculateReadTime(content)} minute read\n                          </p>\n                          {parseHTML(removeExcerptLink(excerpt))}\n                        </div>\n                        <UnstyledLink to={`/post/${slug}`}>\n                          {displayImage(featuredImage)}\n                        </UnstyledLink>\n                      </PreviewWrapper>\n                      <Seperator />\n                    </>\n                  );\n                } else {\n                  return (\n                    <>\n                      <div>\n                        <UnstyledLink to={`/post/${slug}`}>\n                          <H2>{title}</H2>\n                        </UnstyledLink>\n                        <p>\n                          <b>{name}</b> | {calculateReadTime(content)} minute read\n                        </p>\n                        {parseHTML(removeExcerptLink(excerpt))}\n                      </div>\n                      <Seperator />\n                    </>\n                  );\n                }\n              },\n            )}\n          </CategoryPreview>\n          <LatestIssue css={{ gridColumn: \"10/-1\" }} />\n          {remaining.map(({ node }) => {\n            if (node.posts.nodes.length > 0) {\n              return (\n                <CategoryPreview css={{ gridColumn: \"1/-1\" }}>\n                  <UnstyledLink to={`/category/${node.slug}`}>\n                    <CategoryName>{node.name}</CategoryName>\n                  </UnstyledLink>\n                  {node.posts.nodes.slice(0, 2).map(\n                    ({\n                      slug,\n                      title,\n                      content,\n                      excerpt,\n                      featuredImage,\n                      author: {\n                        node: { name },\n                      },\n                    }) => {\n                      if (featuredImage) {\n                        return (\n                          <>\n                            <PreviewWrapper>\n                              <div>\n                                <UnstyledLink to={`/post/${slug}`}>\n                                  <H2>{title}</H2>\n                                </UnstyledLink>\n                                <p>\n                                  <b>{name}</b> | {calculateReadTime(content)} minute read\n                                </p>\n                                {parseHTML(removeExcerptLink(excerpt))}\n                              </div>\n                              <UnstyledLink to={`/post/${slug}`}>\n                                {displayImage(featuredImage)}\n                              </UnstyledLink>\n                            </PreviewWrapper>\n                            <Seperator />\n                          </>\n                        );\n                      } else {\n                        return (\n                          <>\n                            <div>\n                              <UnstyledLink to={`/post/${slug}`}>\n                                <H2>{title}</H2>\n                              </UnstyledLink>\n                              <p>\n                                <b>{name}</b> | {calculateReadTime(content)} minute read\n                              </p>\n                              {parseHTML(removeExcerptLink(excerpt))}\n                            </div>\n                            <Seperator />\n                          </>\n                        );\n                      }\n                    },\n                  )}\n                </CategoryPreview>\n              );\n            }\n          })}\n        </Container>\n      </Layout>\n    );\n  } else {\n    return (\n      <Layout>\n        <SEO title=\"Home\" />\n        <FeaturedPost />\n        <Container>\n          <CategoryGrid css={{ gridColumn: \"1/-1\" }} />\n          <LatestArticleList css={{ gridColumn: \"1/-1\" }} />\n          <LatestIssue\n            css={{ gridColumn: \"1/-1\", width: \"100%\", display: \"flex\", justifyContent: \"center\" }}\n          />\n          <CategoryPreview css={{ gridColumn: \"1/-1\" }}>\n            <UnstyledLink to={`/category/${first.node.slug}`}>\n              <CategoryName>{first.node.name}</CategoryName>\n            </UnstyledLink>\n            {first.node.posts.nodes.slice(0, 2).map(\n              ({\n                slug,\n                title,\n                content,\n                excerpt,\n                author: {\n                  node: { name },\n                },\n              }) => {\n                return (\n                  <>\n                    <UnstyledLink to={`/post/${slug}`}>\n                      <H2>{title}</H2>\n                    </UnstyledLink>\n                    <p>\n                      <b>{name}</b> | {calculateReadTime(content)} minute read\n                    </p>\n                    {parseHTML(removeExcerptLink(excerpt))}\n                    <Seperator />\n                  </>\n                );\n              },\n            )}\n          </CategoryPreview>\n          {remaining.map(({ node }) => {\n            if (node.posts.nodes.length > 0) {\n              return (\n                <CategoryPreview css={{ gridColumn: \"1/-1\" }}>\n                  <UnstyledLink to={`/category/${node.slug}`}>\n                    <CategoryName>{node.name}</CategoryName>\n                  </UnstyledLink>\n                  {node.posts.nodes.slice(0, 2).map(\n                    ({\n                      slug,\n                      title,\n                      content,\n                      excerpt,\n                      author: {\n                        node: { name },\n                      },\n                    }) => {\n                      return (\n                        <>\n                          <UnstyledLink to={`/post/${slug}`}>\n                            <H2>{title}</H2>\n                          </UnstyledLink>\n                          <p>\n                            <b>{name}</b> | {calculateReadTime(content)} minute read\n                          </p>\n                          {parseHTML(removeExcerptLink(excerpt))}\n                          <Seperator />\n                        </>\n                      );\n                    },\n                  )}\n                </CategoryPreview>\n              );\n            }\n          })}\n        </Container>\n      </Layout>\n    );\n  }\n};\n\nexport default Home;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const getCategoryPreviews = () => {\n  const {\n    allWpCategory: { categories },\n  } = useStaticQuery(graphql`\n    query MyQuery {\n      allWpCategory(filter: { name: { ne: \"Uncategorized\" } }) {\n        categories: edges {\n          node {\n            slug\n            name\n            posts {\n              nodes {\n                slug\n                title\n                excerpt\n                content\n                author {\n                  node {\n                    name\n                  }\n                }\n                featuredImage {\n                  node {\n                    id\n                    localFile {\n                      childImageSharp {\n                        id\n                        gatsbyImageData(\n                          layout: CONSTRAINED\n                          placeholder: BLURRED\n                          formats: [AUTO, WEBP, AVIF]\n                        )\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return {\n    first: categories.slice(0, 1)[0],\n    remaining: categories.slice(1),\n  };\n};\n","// Removes HTML tags included in text.\nexport const cleanHTML = (str) => str.replace(/(<([^>]+)>)/gi, \"\");\n","export const calculateReadTime = (string) => {\n  const WPM = 225;\n  const words = string.trim().split(/\\s+/).length;\n  const time = Math.ceil(words / WPM);\n\n  return time;\n};\n","export const removeExcerptLink = (excerpt: string): string => {\n  return excerpt.split(' <a class=\"more-link\" ')[0];\n};\n","import { styled } from \"../../stitches.config\";\n\nexport const Figure = styled(\"figure\", {\n  width: \"100%\",\n\n  margin: \"$1 0\",\n\n  img: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n\n  figcaption: {\n    fontStyle: \"italic\",\n    textAlign: \"center\",\n    marginTop: \"$1\",\n  },\n});\n","import React from \"react\";\nimport parse, { attributesToProps, domToReact } from \"html-react-parser\";\n\nimport { H1, H2, H3 } from \"../components/Heading\";\nimport { Text } from \"../components/Text\";\nimport { TextLink } from \"../components/Link\";\nimport { Figure } from \"../components/Figure\";\n\nconst mappings = {\n  p: Text,\n  h1: H1,\n  h2: H2,\n  h3: H3,\n  a: TextLink,\n  figure: Figure,\n};\n\nconst options = {\n  replace: (domNode) => {\n    const props = domNode.attribs && attributesToProps(domNode.attribs);\n\n    if (!mappings[domNode.name]) {\n      return;\n    }\n\n    const Element = mappings[domNode.name];\n\n    if (domNode.children) {\n      return <Element {...props}>{domToReact(domNode.children, options)}</Element>;\n    }\n\n    return <Element {...props} />;\n  },\n};\n\nconst options2 = {\n  replace: (domNode) => {\n    if (domNode.attribs && domNode.name === \"p\") {\n      const props = attributesToProps(domNode.attribs);\n      return <Text {...props}>{domToReact(domNode.children)}</Text>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h1\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H1 {...props}>{domToReact(domNode.children)}</H1>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h2\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H2 {...props}>{domToReact(domNode.children)}</H2>;\n    }\n\n    if (domNode.attribs && domNode.name === \"h3\") {\n      const props = attributesToProps(domNode.attribs);\n      return <H3 {...props}>{domToReact(domNode.children)}</H3>;\n    }\n\n    if (domNode.attribs && domNode.name === \"a\") {\n      const props = attributesToProps(domNode.attribs);\n      return <TextLink {...props}>{domToReact(domNode.children)}</TextLink>;\n    }\n\n    if (domNode.attribs && domNode.name === \"figure\") {\n      const props = attributesToProps(domNode.attribs);\n      return <Figure {...props}>{domToReact(domNode.children)}</Figure>;\n    }\n  },\n};\n\nexport const parseHTML = (html: string, customOptions = {}) =>\n  parse(html, { ...options, ...customOptions });\n"],"names":["Wrapper","styled","display","flexDirection","alignItems","margin","Preview","minWidth","width","marginTop","Title","TextLink","textDecoration","textAlign","fontSize","fontWeight","fontFamily","color","marginBottom","Date","Text","PrintIssueCard","title","date","image","link","to","src","position","content","height","top","left","background","opacity","transition","Body","padding","H1","textShadow","Content","Container","justifyContent","gap","zIndex","minHeight","featuredImageCSS","css","maxHeight","Excerpt","FeaturedPost","useStaticQuery","allWpPost","posts","node","excerpt","slug","featuredImage","getImage","localFile","G","alt","className","parseHTML","removeExcerptLink","replace","domNode","attribs","name","props","attributesToProps","domToReact","children","backgroundColor","CategoryBubble","UnstyledLink","textTransform","borderRadius","H2","backgroundImage","objectFit","PostImage","undefined","S","CategoryPost","category","Grid","gridTemplateColumns","gridColumnGap","gridRowGap","CategoryGrid","slice","map","nodes","categories","key","monthNames","LatestIssue","allIssues","edges","epoch","documentId","docname","style","getMonth","getFullYear","Holder","ArticleHolder","DetailsHoder","gridColumn","H3","calculateReadTime","CategoryPreview","PreviewWrapper","CategoryName","Seperator","previewImageStyle","justifySelf","alignSelf","isDesktop","useMediaQuery","breakpoints","first","allWpCategory","remaining","displayImage","Layout","SEO","gridRow","author","length","cleanHTML","str","string","words","trim","split","Math","ceil","Figure","img","figcaption","fontStyle","mappings","p","h1","h2","h3","a","figure","options","Element","html","customOptions","parse"],"sourceRoot":""}